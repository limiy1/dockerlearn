###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.1-slim-buster as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends build-essential cmake wget

# lint
RUN pip install --upgrade pip
RUN pip install flake8

# python check, ignore "line too long" and "not used module" checks
RUN flake8 --ignore=E501,F401 .

# install python dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

# install rdkafka
WORKDIR /usr/src/kafka
RUN wget --no-check-certificate --content-disposition https://github.com/edenhill/librdkafka/archive/v1.5.0.tar.gz
RUN tar -xf librdkafka-1.5.0.tar.gz
WORKDIR /usr/src/kafka/librdkafka-1.5.0
RUN ./configure --prefix /usr
RUN make && make install

# copy and build c-source code
WORKDIR /usr/src/c/
COPY ./sourceCode/* ./
RUN cmake . && make

#########
# FINAL #
#########

# pull official base image
FROM python:3.8.1-slim-buster

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup --system appgroup
RUN adduser --system app
RUN adduser app appgroup

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apt-get update && apt-get install -y --no-install-recommends netcat
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN mkdir /usr/src/c
COPY --from=builder /usr/src/c/libtestkafka.so.* /usr/src/c
COPY --from=builder /usr/lib/librdkafka++.so.1 /usr/local/lib
COPY --from=builder /usr/lib/librdkafka.so.1 /usr/local/lib
RUN ln -s /usr/src/c/libtestkafka.so.* /usr/src/c/libtestkafka.so
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# copy entrypoint-prod.sh
COPY ./entrypoint.prod.sh $APP_HOME

# copy project
COPY ./entrypoint.sh $APP_HOME/entrypoint.sh
COPY ./manage.py $APP_HOME/manage.py
COPY ./project $APP_HOME/project

# chown all the files to the app user
RUN chown -R app:appgroup $APP_HOME

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]
